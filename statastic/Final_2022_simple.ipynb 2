{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db2d4055-ad00-426f-81a3-2517ea53d6df",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#載入所需函示庫\n",
    "from matplotlib import pyplot as plt\n",
    "%matplotlib inline\n",
    "# 設定圖形大小; DPI越大圖越大\n",
    "plt.rcParams[\"figure.dpi\"] = 80\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import math\n",
    "import statistics\n",
    "import scipy.stats as stats\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.stats.api as sms\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels.stats.multicomp as smm\n",
    "import statsmodels.stats.outliers_influence as sso\n",
    "import statsmodels\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "def objective(x, a, b, c):\n",
    "    return a * x + b * x**2 + c\n",
    "\n",
    "def c_of_c_test(r, n, a):\n",
    "    t_value = r * ((n-2)/(1 - r**2)) ** 0.5\n",
    "    t_critical = stats.t.ppf(1 - a/2, n - 2)\n",
    "    pval = stats.t.sf(np.abs(t_value), n - 2)*2\n",
    "    print('r = ', r)\n",
    "    print('t_critical = ', t_critical)\n",
    "    print('t = ', t_value)\n",
    "    print('p_value = ', pval)\n",
    "    return t_value\n",
    "\n",
    "def CI_simple_regression(df,x, y, x1, a):\n",
    "    x_new = np.array([1, x1])\n",
    "    X2 = sm.add_constant(x)\n",
    "    olsmod = sm.OLS(y, X2)\n",
    "    result_reg = olsmod.fit()\n",
    "    #point prediction value\n",
    "    y_head = np.dot(df.params, x_new)\n",
    "    print(\"y_head = \", y_head)\n",
    "    (t_minus, t_plus) = stats.t.interval(alpha = (1.0 - a), df = result_reg.df_resid )\n",
    "    cov_mat1 = np.cov(y, x)\n",
    "    x_bar = x.mean()\n",
    "    core1 = (1 / result_reg.nobs + \n",
    "         (x1 - x_bar) ** 2 / (result_reg.nobs - 1) /    cov_mat1[1,1] ) ** 0.5\n",
    "    lower_bound = y_head + t_minus * (result_reg.mse_resid ** 0.5) * core1\n",
    "    upper_bound = y_head + t_plus * (result_reg.mse_resid ** 0.5) * core1\n",
    "    half_interval = t_plus * (result_reg.mse_resid ** 0.5) * core1\n",
    "    CI = np.array([lower_bound, upper_bound])\n",
    "    print(f\"{100*(1-a)}%% confidence interval for mean: [%0.4f, %0.4f]\" % (lower_bound, upper_bound))\n",
    "    print(\"    or %0.4f  +- %0.4f\" % (y_head, half_interval))\n",
    "    return CI\n",
    "\n",
    "def PI_simple_regression(df,x, y, x1, a):\n",
    "    x_new = np.array([1, x1])\n",
    "    print(\"make prediction at new x = \", x1)\n",
    "    X2 = sm.add_constant(x)\n",
    "    olsmod = sm.OLS(y, X2)\n",
    "    result_reg = olsmod.fit()\n",
    "    y_head = np.dot(df.params, x_new)\n",
    "    print(\"y_head = \", y_head)\n",
    "    (t_minus, t_plus) = stats.t.interval(alpha = (1.0 - a), df = result_reg.df_resid )\n",
    "    cov_mat1 = np.cov(y, x)\n",
    "    x_bar = x.mean()\n",
    "    core2 = (1 + 1 / result_reg.nobs + \n",
    "         (x1 - x_bar) ** 2 / (result_reg.nobs - 1) / cov_mat1[1,1] ) ** 0.5\n",
    "    lower_bound = y_head + t_minus * (result_reg.mse_resid ** 0.5) * core2\n",
    "    upper_bound = y_head + t_plus * (result_reg.mse_resid ** 0.5) * core2\n",
    "    half_interval = t_plus * (result_reg.mse_resid ** 0.5) * core2\n",
    "    PI = np.array([lower_bound, upper_bound])\n",
    "    print(f\"{100*(1-a)}%% prediction interval: [%0.4f, %0.4f]\" % (lower_bound, upper_bound))\n",
    "    print(\"    or %0.4f  +- %0.4f\" % (y_head, half_interval))\n",
    "    return PI\n",
    "\n",
    "def Chi_Square_for_Normality(SD, N, a): \n",
    "    m = np.mean(SD)\n",
    "    s = np.std(SD)   \n",
    "    prob_bins = np.zeros((N + 1))\n",
    "    z_bins = np.zeros((N + 1))\n",
    "    z_bins[0] = -4\n",
    "    z_bins[N] = 4\n",
    "    for i in range(0, N+1):\n",
    "        prob_bins[i] = i/N\n",
    "    for j in range(1, N):\n",
    "        z_bins[j] = m + stats.norm.isf(1 - prob_bins[j]) * s \n",
    "    counts, bins = np.histogram(SD, bins=z_bins)\n",
    "    nobs = counts.sum()\n",
    "    prob_e = np.zeros((N))\n",
    "    for i in range(1, N+1):\n",
    "        prob_e[i - 1] = prob_bins[i] - prob_bins[i - 1]\n",
    "    freq_e = nobs * prob_e\n",
    "    freq_o = counts\n",
    "    if np.sum(freq_e < 5) > 0:\n",
    "        print(\"Rule of five is not met. \")\n",
    "        chi_pval = -99999 # Invalid\n",
    "    else:\n",
    "        chi_stat, pval = stats.chisquare(freq_o, freq_e) \n",
    "        chi_pval = stats.chi2.sf(chi_stat, N - 3)\n",
    "#         print(\"Chi-squared test: statistics = %0.4f, p-value = %0.4f\" % (chi_stat, chi_pval))\n",
    "    df = N - 3\n",
    "    crit_value = stats.chi2.ppf(1 - a, df)\n",
    "#     print(\"Critical value = %0.4f (defree of freedom = %d)\" % (crit_value, df))\n",
    "    return chi_pval\n",
    "\n",
    "\n",
    "def Randomness(SD):\n",
    "    print('Randomness Test using Runs Test')\n",
    "    print(' - H0: Randomness exists.')\n",
    "    print(' - H1: Randomness does not exist\\n')\n",
    "    \n",
    "    SD_median = statistics.median(SD)\n",
    "    \n",
    "    runs, n1, n2 = 1, 0, 0\n",
    "    if(SD[0]) >= SD_median:\n",
    "        n1 += 1   \n",
    "    else:\n",
    "        n2 += 1     \n",
    "    # Checking for start of new run \n",
    "    for i in range(1,len(SD)): \n",
    "        # no. of runs \n",
    "        if (SD[i] >= SD_median and SD[i-1] < SD_median) or (SD[i] < SD_median and SD[i-1] >= SD_median):\n",
    "            runs += 1  \n",
    "            # print(i, runs)\n",
    "        # no. of positive values \n",
    "        if(SD[i]) >= SD_median: \n",
    "            n1 += 1   \n",
    "        # no. of negative values \n",
    "        else: \n",
    "            n2 += 1   \n",
    "    runs_exp = ((2*n1*n2)/(n1+n2)) + 1\n",
    "    stan_dev = math.sqrt((2*n1*n2*(2*n1*n2-n1-n2))/(((n1+n2)**2)*(n1+n2-1))) \n",
    "    z = (runs-runs_exp)/stan_dev\n",
    "    pval_z = stats.norm.sf(abs(z)) * 2\n",
    "    print('runs = ', runs)\n",
    "    print('n1 = ', n1)\n",
    "    print('n2 = ', n2)\n",
    "    if n1>20 or n2>20:\n",
    "        print('\\nruns_exp = ', runs_exp)\n",
    "        print('stan_dev = ', stan_dev)\n",
    "        print('z = ', z)\n",
    "        print('pval_z = ', pval_z)\n",
    "        \n",
    "        if pval_z < 0.05:\n",
    "            print('\\nSince p-value < 0.05, we reject H0 and conclude randomness does not exist.')\n",
    "        else:\n",
    "            print('\\nSince p-value > 0.05, we do not reject H0 and we may conclude randomness exists.')\n",
    "    else:\n",
    "        print('Since both n1 and n2 < 20, we check the Run Test table.')\n",
    "def Homoscedasticity(data, xlabel):\n",
    "    print('Homoscedasticity Test')\n",
    "    print(' - H0: Homoscedasticity')\n",
    "    print(' - H1: Heteroscedasticity\\n')\n",
    "    y_pre = data[:, 2]\n",
    "    SD = data[:, 10]\n",
    "    plt.plot(y_pre, SD, 'o', color = 'gray')\n",
    "    plt.axhline(y=0, color = 'blue')\n",
    "    plt.axhline(y=2, color = 'red')\n",
    "    plt.axhline(y=-2, color = 'red')\n",
    "    plt.title('Standardized Residual Plot')\n",
    "    plt.xlabel(xlabel)\n",
    "    plt.ylabel('Standardized Residual')\n",
    "    plt.show()\n",
    "\n",
    "def Normality(SD):\n",
    "    print('Normality test for errors using Shapiro Test or Chi-square Test')\n",
    "    print(' - H0: Errors are normally distributed.')\n",
    "    print(' - H1: Errors are not normally distributed.\\n')\n",
    "    stat, p = stats.shapiro(SD)\n",
    "    chi2_pval = Chi_Square_for_Normality(SD, 6, 0.05) \n",
    "    print('pvalue of Chi square =', chi2_pval)\n",
    "    print('pvalue of Shapiro Test =', p)\n",
    "    if p > 0.05:\n",
    "        print('\\nSince p-value (shapiro) > 0.05, we do not reject H0 and we may conclude errors are normally distributed.')\n",
    "    elif chi2_pval > 0.05:\n",
    "         print('\\nSince p-value (chi square) > 0.05, we do not reject H0 and we may conclude errors are normally distributed.')\n",
    "    else:\n",
    "        print('\\nSince p-value < 0.05, we reject H0 and conclude errors are not normally distributed.')\n",
    "\n",
    "def Outlier(SD):\n",
    "    df = pd.DataFrame(SD,columns = ['SD'])\n",
    "    filter = (df['SD'] < -2) | (df['SD'] > 2)\n",
    "    outliers = df['SD'].loc[filter]\n",
    "    ids = outliers.index\n",
    "    ids = [n+1 for n in ids]\n",
    "    \n",
    "    print(\"Outliers by SD = \\n\")\n",
    "    print(outliers)\n",
    "    \n",
    "    if len(ids)== 0:\n",
    "        print(\"\\nThere isnt any oulier.\")\n",
    "    else:\n",
    "        print(\"\\nSample\", ids, \"are outliers.\")\n",
    "        \n",
    "def Influential(x_data, y_data):\n",
    "    x_data = x_data.values\n",
    "    y_data = y_data.values\n",
    "    cov_mat = np.cov(y_data, x_data)\n",
    "    x_data_bar = x_data.mean()\n",
    "    data_nobs = len(x_data)\n",
    "    h_val = 1 / data_nobs + (x_data - x_data_bar) ** 2 / (data_nobs - 1) / cov_mat[1,1]\n",
    "    df = pd.DataFrame(h_val,columns = ['hi'])\n",
    "    filter = (df['hi'] > 6 / data_nobs )\n",
    "    influs = df['hi'].loc[filter]\n",
    "    ids = influs.index\n",
    "    ids = [n+1 for n in ids]\n",
    "    \n",
    "    print(\"Influential Observations by hi = \\n\")\n",
    "    print(influs)\n",
    "    \n",
    "    if len(ids)== 0:\n",
    "        print(\"\\nThere isnt any influential observation.\")\n",
    "    else:\n",
    "        print(\"\\nSample\", ids, \"are influential observations.\")\n",
    "\n",
    "def CI_PI_regression(xdata, yval, x1, a):\n",
    "    print(\"make CI and PI prediction at mean of x = \", x1)\n",
    "    X_data_T = xdata.T\n",
    "    X_data2 = sm.add_constant(X_data_T)\n",
    "    olsmod = sm.OLS(yval, X_data2)\n",
    "    result_reg = olsmod.fit()\n",
    "    y_head = np.dot(result_reg.params, x1)\n",
    "    print(\"y_head = \", y_head)\n",
    "    (t_minus, t_plus) = stats.t.interval(alpha = (1.0 - a), df = result_reg.df_resid )\n",
    "    core1 = (result_reg.mse_resid * np.matmul(x1, np.linalg.solve(np.matmul(X_data2.T, X_data2), x1))) ** 0.5\n",
    "    lower_bound = y_head +  t_minus * core1\n",
    "    upper_bound = y_head +  t_plus * core1\n",
    "    print(\"confidence interval of mean = [%0.4f, %0.4f] \" % (lower_bound, upper_bound))\n",
    "    core2 = (result_reg.mse_resid * (1 + np.matmul(x1, np.linalg.solve(np.matmul(X_data2.T, X_data2), x1)))) ** 0.5\n",
    "    lower_bound2 = y_head +  t_minus * core2\n",
    "    upper_bound2 = y_head +  t_plus * core2\n",
    "    print(\"Prediction interval = [%0.4f, %0.4f] \" % (lower_bound2, upper_bound2))\n",
    "    CI_PI = np.array([lower_bound, upper_bound, lower_bound2, upper_bound2])\n",
    "    return CI_PI\n",
    "\n",
    "def Durbin_Watson_test(x,dl,du):\n",
    "    x_square_sum = np.vdot(x, x)\n",
    "    print(\"x_square_sum = \", x_square_sum)\n",
    "    size = x.size\n",
    "    print(\"size = \", size)\n",
    "    x_d = np.zeros((size))\n",
    "    print(\"x_d = \", x_d)\n",
    "    l_size = size - 1\n",
    "    for i in range(l_size):\n",
    "        x_d[i + 1] = x[i + 1] - x[i]\n",
    "    print(\"x_d = \", x_d)\n",
    "    d = np.vdot(x_d, x_d) / x_square_sum\n",
    "    print(f\"According to table of Durbin-Watson test, dL is {dl}, dU is {du}. d is {d:.4f}.\")\n",
    "    print(\"\\nConduct Autocorrelation test\")\n",
    "    print(\"H0: The data are not positively first-order correlated.\")\n",
    "    print(\"H1: The data are positively first-order correlated.\\n\")\n",
    "    if d < dl:\n",
    "        print(\"d < dL. H0 is rejected.There is enough evidence to show that positive first-order correlation exists.\")\n",
    "    elif d > du:\n",
    "        print(\"d > dU. H0 is not rejected.There is not enough evidence to show that positive first-order correlation exists.\")\n",
    "    elif (d > dl and d <du):\n",
    "        print(\"The test is inconclusive.\")\n",
    "    print(\"\\nH0: The data are not negatively first-order correlated.\")\n",
    "    print(\"H1: The data are negatively first-order correlated.\\n\")\n",
    "    if d > 4-dl:\n",
    "        print(\"d > 4 - dL. H0 is rejected.There is enough evidence to show that negative first-order correlation exists.\")\n",
    "    elif d < 4-du:\n",
    "        print(\"d < 4 - dU. H0 is not rejected.There is not enough evidence to show that negative first-order correlation exists.\")\n",
    "    elif (d < 4 - dl and d  > 4 - du):\n",
    "        print(\"The test is inconclusive.\")\n",
    "\n",
    "def Model_Assess(result_reg, ydata, ylabel):\n",
    "    print(\"Check Standard error\")\n",
    "    print(\"standard error = \", result_reg.mse_resid ** 0.5)\n",
    "    print(\"mean of y\", ydata.mean())\n",
    "    print(\"std of y\", ydata.std())\n",
    "    \n",
    "    print(\"\\n Check R-squared\")\n",
    "    print(\"R-squared = \", result_reg.rsquared)\n",
    "    print(\"Adjusted R-squared = \", result_reg.rsquared_adj)\n",
    "    print(f\"{result_reg.rsquared*100:.4f}% of variation in {ylabel} is explained by the variations in independent variables. The rest remains unexplained.\")\n",
    "    if(result_reg.rsquared - result_reg.rsquared_adj < 0.06):\n",
    "        print(\"The gap between R-squared and Adjusted R-squared is smaller than 0.06, The model is fine.\")\n",
    "    else:\n",
    "        print(\"The gap between R-squared and Adjusted R-squared is bigger than 0.06, There may be overfitting.\")\n",
    "    \n",
    "    print(\"\\n Conduct F test\")\n",
    "    f_res = result_reg.fvalue\n",
    "    print(\"F value = \", f_res)\n",
    "    MSE = result_reg.mse_resid\n",
    "    df_model = result_reg.df_model\n",
    "    df_error = result_reg.df_resid\n",
    "    MSR = f_res * MSE\n",
    "    SSR = MSR * df_model\n",
    "    print(\"SSR = \", SSR, \"df = \", df_model, \"MSR = \", MSR)\n",
    "    print(\"SSE = \", MSE * df_error, \"df = \", df_error, \"MSE = \", MSE)\n",
    "    print(\"F = \", MSR / MSE)\n",
    "    A = np.identity(len(result_reg.params))\n",
    "    A = A[1:,:]\n",
    "    print(\"F test = \", result_reg.f_test(A))\n",
    "    print(\"F p-value = \", result_reg.f_pvalue)\n",
    "    if( result_reg.f_pvalue < 0.05):\n",
    "        print(\"Since p-value is smaller than 0.05, H0 is rejected. The model is valid.\")\n",
    "    else:\n",
    "        print(\"Since p-value is bigger than 0.05, H0 is not rejected. The model is not valid.\")\n",
    "    \n",
    "    print(\"\\n Conduct T test\")\n",
    "    to_t = result_reg.pvalues.reset_index()\n",
    "    for i in range(1,len(to_t)):\n",
    "        if to_t[0][i] < 0.05:\n",
    "            print(f\"The pvalue of {to_t['index'][i]} is smaller than 0.05, H0 is rejected. {to_t['index'][i]} is related to {ylabel}\")\n",
    "        else:\n",
    "            print(f\"The pvalue of {to_t['index'][i]} is bigger than 0.05, H0 is not rejected. {to_t['index'][i]} is not related to {ylabel}\")\n",
    "def Print(result_reg):\n",
    "    To_Print = result_reg.params.reset_index()\n",
    "    print(\"Estimated model: y = \", end='')\n",
    "    for i in range(len(To_Print)):\n",
    "        if i == 0:\n",
    "            print(f\"{To_Print[0][i]:.4f}\", end='')\n",
    "        else:\n",
    "            if To_Print[0][i] >= 0:\n",
    "                print(\" + \", end='')\n",
    "            else:\n",
    "                print(\" \", end='')\n",
    "            print(f\"{To_Print[0][i]:.4f} {To_Print['index'][i]}\", end='')\n",
    "    \n",
    "def forward_selection(input_df, depv=\"y\", indepv = [\"x1\"]):\n",
    "    selected = []\n",
    "    candidates = indepv.copy()\n",
    "    best_adjr2 = -1\n",
    "    best_subset = []\n",
    "    while len(candidates) > 0:\n",
    "        print(\"Current Candidates: \", candidates)\n",
    "        tmp_indep_subset = []\n",
    "        tmp_model_adjr = []\n",
    "        tmp_model_nindep = []\n",
    "        for acandidate in candidates:\n",
    "            tmplist = selected.copy()\n",
    "            tmplist.append(acandidate)\n",
    "            modelstr = depv + \" ~ \" + \"+\".join(tmplist)\n",
    "            result6tmp = smf.ols(modelstr, data=input_df).fit()\n",
    "            tmp_indep_subset.append(tmplist)\n",
    "            tmp_model_adjr.append(result6tmp.rsquared_adj)\n",
    "            tmp_model_nindep.append(len(tmplist))\n",
    "        tmp_adjr2 = np.array(tmp_model_adjr)\n",
    "        tmpind = tmp_adjr2.argmax()\n",
    "        this_adjr2 = tmp_adjr2[tmpind]\n",
    "        selected = tmp_indep_subset[tmpind]\n",
    "        if this_adjr2 <= 0:\n",
    "            raise(\"Encounterd negative Adj R2. Stop.\")\n",
    "        print(\"===============\")\n",
    "        print(\"Current best model: \", selected)\n",
    "        print(\"Current best AdjR2: \", this_adjr2)\n",
    "        if this_adjr2 > best_adjr2:\n",
    "            #print(\" best result updated\")\n",
    "            best_adjr2 = this_adjr2\n",
    "            best_subset = selected\n",
    "        candidates = set(candidates) - set(selected)\n",
    "        candidates = list(candidates)\n",
    "    print(\"best_adjr2 = \", best_adjr2)\n",
    "    print(\"best_subset = \", best_subset)\n",
    "    modelstr = depv + \" ~ \" + \"+\".join(best_subset)\n",
    "    result6b = smf.ols(modelstr, data=input_df).fit()\n",
    "    print(result6b.summary()) \n",
    "    \n",
    "def influential_multi(X_data,df,data):\n",
    "    # hi \n",
    "    X = np.array(X_data)\n",
    "    H = np.matmul(X, np.linalg.solve(np.matmul(X.T, X), X.T))\n",
    "    df['hii'] = np.diagonal(H)\n",
    "    df_h = pd.DataFrame(df['hii'])\n",
    "    k = result_reg.df_model\n",
    "    n = len(df_h['hii'])\n",
    "    h_level = 3 * (k+1) / n \n",
    "    print(\"h_level = \", h_level)\n",
    "    print(\" \\n\")\n",
    "    filter = (df_h['hii'] > h_level )\n",
    "    influs = df_h['hii'].loc[filter]\n",
    "    print(\"Influential Observations by hi = \\n\")\n",
    "    print(influs)\n",
    "    ids = influs.index\n",
    "    ids = [n+1 for n in ids]\n",
    "    \n",
    "    if len(ids)== 0:\n",
    "        print(\"\\nThere isnt any influential observation.\")\n",
    "    else:\n",
    "        print(\"\\nSample\", ids, \"are influential observations.\")\n",
    "\n",
    "    # cooks\n",
    "    s2_e = result_reg.mse_resid\n",
    "    k = result_reg.df_model\n",
    "    y_a = data[:, 1]\n",
    "    y_f = data[:, 2]\n",
    "    h_i = df['hii']\n",
    "    CD_arr = np.square(y_a - y_f) / s2_e / (k - 1) * h_i / np.square(1 - h_i)\n",
    "    CD = np.array(CD_arr)\n",
    "    df_cd = pd.DataFrame(CD,columns = ['CD'])\n",
    "    display(df_cd.head())\n",
    "    filter = (df_cd['CD'] > 1 )\n",
    "    influs = df_cd['CD'].loc[filter]\n",
    "    print(\"Influential Observations by Cook's Distances = \\n\")\n",
    "    print(influs)\n",
    "    ids = influs.index\n",
    "    ids = [n+1 for n in ids]\n",
    "    \n",
    "    if len(ids)== 0:\n",
    "        print(\"\\nThere isnt any influential observation.\")\n",
    "    else:\n",
    "        print(\"\\nSample\", ids, \"are influential observations.\")\n",
    "def value_to_int(x):\n",
    "    if type(x) == float or type(x) == int:\n",
    "        return x\n",
    "    if 'K' in x:\n",
    "        if len(x) > 1:\n",
    "            return int(float(x.replace('K', '')) * 1000)\n",
    "        return 1000\n",
    "    if 'M' in x:\n",
    "        if len(x) > 1:\n",
    "            return int(float(x.replace('M', '')) * 1000000)\n",
    "        return 1000000\n",
    "    if 'B' in x:\n",
    "        return int(float(x.replace('B', '')) * 1000000000)\n",
    "    if ' ' in x:\n",
    "        return int(float(x.replace(' ','')))\n",
    "    return int(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1a66c10b-b2f7-4651-87ba-2698f36442f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Website</th>\n",
       "      <th>Trustworthiness</th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Child_Safety</th>\n",
       "      <th>Avg_Daily_Pageviews</th>\n",
       "      <th>Privacy</th>\n",
       "      <th>Facebook_likes</th>\n",
       "      <th>Twitter_mentions</th>\n",
       "      <th>Google_pluses</th>\n",
       "      <th>LinkedIn_mentions</th>\n",
       "      <th>Pinterest_pins</th>\n",
       "      <th>StumbleUpon_views</th>\n",
       "      <th>Traffic_Rank</th>\n",
       "      <th>Location</th>\n",
       "      <th>Hosted_by</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>www.google.com</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>515 007 350</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>4 192 159 833</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>94.2K</td>\n",
       "      <td>11.2K</td>\n",
       "      <td>11.7M</td>\n",
       "      <td>1.67K</td>\n",
       "      <td>10.8K</td>\n",
       "      <td>246K</td>\n",
       "      <td>1</td>\n",
       "      <td>United States</td>\n",
       "      <td>Google Inc.</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>www.youtube.com</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>506 457 282</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>2 679 159 025</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>13.5K</td>\n",
       "      <td>16.5K</td>\n",
       "      <td>19.3M</td>\n",
       "      <td>60K</td>\n",
       "      <td>47</td>\n",
       "      <td>329K</td>\n",
       "      <td>2</td>\n",
       "      <td>United States</td>\n",
       "      <td>Google Inc.</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>www.facebook.com</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>270 071 255</td>\n",
       "      <td>Good</td>\n",
       "      <td>1 082 985 733</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>5.87M</td>\n",
       "      <td>64.4K</td>\n",
       "      <td>127K</td>\n",
       "      <td>6.23K</td>\n",
       "      <td>4.15K</td>\n",
       "      <td>23.1K</td>\n",
       "      <td>3</td>\n",
       "      <td>Ireland</td>\n",
       "      <td>Facebook</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>777</td>\n",
       "      <td>www.baidu.com</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>116 401 260</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>741 476 028</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>365</td>\n",
       "      <td>259K</td>\n",
       "      <td>12K</td>\n",
       "      <td>5.38K</td>\n",
       "      <td>16</td>\n",
       "      <td>742</td>\n",
       "      <td>4</td>\n",
       "      <td>Hong Kong</td>\n",
       "      <td>Rooms 2201-03, 22/F, World Wide House</td>\n",
       "      <td>China</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>www.wikipedia.org</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>118 921 355</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>397 197 324</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>476</td>\n",
       "      <td>162</td>\n",
       "      <td>126K</td>\n",
       "      <td>1.24K</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>United States</td>\n",
       "      <td>Wikimedia Foundation Inc.</td>\n",
       "      <td>Afghanistan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3396</th>\n",
       "      <td>2204</td>\n",
       "      <td>www.noi.md</td>\n",
       "      <td>Good</td>\n",
       "      <td>7 361</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>17 667</td>\n",
       "      <td>Good</td>\n",
       "      <td>9</td>\n",
       "      <td>-</td>\n",
       "      <td>57</td>\n",
       "      <td>19</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>99 576</td>\n",
       "      <td>Moldova, Republic of</td>\n",
       "      <td>JSC \"Moldtelecom\" S.A.</td>\n",
       "      <td>Moldova</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3397</th>\n",
       "      <td>1279</td>\n",
       "      <td>www.europebet.com</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>17 066</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>71 676</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>-</td>\n",
       "      <td>9</td>\n",
       "      <td>13</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>99 702</td>\n",
       "      <td>Georgia</td>\n",
       "      <td>Chempionebi 111 Ltd.</td>\n",
       "      <td>Georgia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3398</th>\n",
       "      <td>1233</td>\n",
       "      <td>www.tahiti-infos.com</td>\n",
       "      <td>Good</td>\n",
       "      <td>10 678</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>27 761</td>\n",
       "      <td>Good</td>\n",
       "      <td>257</td>\n",
       "      <td>4</td>\n",
       "      <td>19</td>\n",
       "      <td>633</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>99 893</td>\n",
       "      <td>France</td>\n",
       "      <td>Webzine</td>\n",
       "      <td>French Polynesia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3399</th>\n",
       "      <td>1330</td>\n",
       "      <td>www.p2pindependentforum.com</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>6 835</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>65 619</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>-</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>99 967</td>\n",
       "      <td>United States</td>\n",
       "      <td>Abuse Department</td>\n",
       "      <td>Gibraltar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3400</th>\n",
       "      <td>2637</td>\n",
       "      <td>www.gov.qa</td>\n",
       "      <td>Good</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Excellent</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Good</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>2</td>\n",
       "      <td>-</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Qatar</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Qatar</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3401 rows × 17 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Unnamed: 0                      Website Trustworthiness  \\\n",
       "0              1               www.google.com       Excellent   \n",
       "1              2              www.youtube.com       Excellent   \n",
       "2              3             www.facebook.com       Excellent   \n",
       "3            777                www.baidu.com       Excellent   \n",
       "4              7            www.wikipedia.org       Excellent   \n",
       "...          ...                          ...             ...   \n",
       "3396        2204                   www.noi.md            Good   \n",
       "3397        1279            www.europebet.com         Unknown   \n",
       "3398        1233         www.tahiti-infos.com            Good   \n",
       "3399        1330  www.p2pindependentforum.com         Unknown   \n",
       "3400        2637                   www.gov.qa            Good   \n",
       "\n",
       "     Avg_Daily_Visitors Child_Safety Avg_Daily_Pageviews    Privacy  \\\n",
       "0           515 007 350    Excellent       4 192 159 833  Excellent   \n",
       "1           506 457 282    Excellent       2 679 159 025  Excellent   \n",
       "2           270 071 255         Good       1 082 985 733  Excellent   \n",
       "3           116 401 260    Excellent         741 476 028  Excellent   \n",
       "4           118 921 355    Excellent         397 197 324  Excellent   \n",
       "...                 ...          ...                 ...        ...   \n",
       "3396              7 361    Excellent              17 667       Good   \n",
       "3397             17 066      Unknown              71 676    Unknown   \n",
       "3398             10 678    Excellent              27 761       Good   \n",
       "3399              6 835    Excellent              65 619    Unknown   \n",
       "3400                NaN    Excellent                 NaN       Good   \n",
       "\n",
       "     Facebook_likes Twitter_mentions Google_pluses LinkedIn_mentions  \\\n",
       "0             94.2K            11.2K         11.7M             1.67K   \n",
       "1             13.5K            16.5K         19.3M               60K   \n",
       "2             5.87M            64.4K          127K             6.23K   \n",
       "3               365             259K           12K             5.38K   \n",
       "4               476              162          126K             1.24K   \n",
       "...             ...              ...           ...               ...   \n",
       "3396              9                -            57                19   \n",
       "3397              -                9            13                 -   \n",
       "3398            257                4            19               633   \n",
       "3399              -                6             1                25   \n",
       "3400              -                -             -                 2   \n",
       "\n",
       "     Pinterest_pins StumbleUpon_views Traffic_Rank              Location  \\\n",
       "0             10.8K              246K            1         United States   \n",
       "1                47              329K            2         United States   \n",
       "2             4.15K             23.1K            3               Ireland   \n",
       "3                16               742            4             Hong Kong   \n",
       "4                 5                 5            5         United States   \n",
       "...             ...               ...          ...                   ...   \n",
       "3396              -                 -       99 576  Moldova, Republic of   \n",
       "3397              -                 -       99 702               Georgia   \n",
       "3398              -                 -       99 893                France   \n",
       "3399              -                 -       99 967         United States   \n",
       "3400              -                 -          NaN                 Qatar   \n",
       "\n",
       "                                  Hosted_by           country  \n",
       "0                               Google Inc.       Afghanistan  \n",
       "1                               Google Inc.       Afghanistan  \n",
       "2                                  Facebook       Afghanistan  \n",
       "3     Rooms 2201-03, 22/F, World Wide House             China  \n",
       "4                 Wikimedia Foundation Inc.       Afghanistan  \n",
       "...                                     ...               ...  \n",
       "3396                 JSC \"Moldtelecom\" S.A.           Moldova  \n",
       "3397                   Chempionebi 111 Ltd.           Georgia  \n",
       "3398                                Webzine  French Polynesia  \n",
       "3399                       Abuse Department         Gibraltar  \n",
       "3400                                    NaN             Qatar  \n",
       "\n",
       "[3401 rows x 17 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df = pd.read_excel('final/output.xlsx')\n",
    "display(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3fe015d0-a9f8-4c15-8ec9-09a36acc0cc1",
   "metadata": {},
   "source": [
    "## Facebook_Likes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b2ff84d6-8249-4cef-b588-8466ff3ddaa2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Facebook_likes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>515007350</td>\n",
       "      <td>94200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>506457282</td>\n",
       "      <td>13500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>270071255</td>\n",
       "      <td>5870000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>116401260</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118921355</td>\n",
       "      <td>476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1522</th>\n",
       "      <td>7462</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1523</th>\n",
       "      <td>7964</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1524</th>\n",
       "      <td>7886</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1525</th>\n",
       "      <td>7361</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1526</th>\n",
       "      <td>10678</td>\n",
       "      <td>257</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1483 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Avg_Daily_Visitors  Facebook_likes\n",
       "0              515007350           94200\n",
       "1              506457282           13500\n",
       "2              270071255         5870000\n",
       "3              116401260             365\n",
       "4              118921355             476\n",
       "...                  ...             ...\n",
       "1522                7462               1\n",
       "1523                7964               1\n",
       "1524                7886               1\n",
       "1525                7361               9\n",
       "1526               10678             257\n",
       "\n",
       "[1483 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Facebook_likes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>515007350</td>\n",
       "      <td>94200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>506457282</td>\n",
       "      <td>13500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>270071255</td>\n",
       "      <td>5870000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>116401260</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118921355</td>\n",
       "      <td>476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1522</th>\n",
       "      <td>7462</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1523</th>\n",
       "      <td>7964</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1524</th>\n",
       "      <td>7886</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1525</th>\n",
       "      <td>7361</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1526</th>\n",
       "      <td>10678</td>\n",
       "      <td>257</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1483 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Avg_Daily_Visitors  Facebook_likes\n",
       "0              515007350           94200\n",
       "1              506457282           13500\n",
       "2              270071255         5870000\n",
       "3              116401260             365\n",
       "4              118921355             476\n",
       "...                  ...             ...\n",
       "1522                7462               1\n",
       "1523                7964               1\n",
       "1524                7886               1\n",
       "1525                7361               9\n",
       "1526               10678             257\n",
       "\n",
       "[1483 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fb = df[df[\"Facebook_likes\"].str.contains(\"-\")==False]\n",
    "fb = fb[['Avg_Daily_Visitors','Facebook_likes']]\n",
    "fb.reset_index(inplace = True, drop = True)\n",
    "fb.dropna(inplace=True)\n",
    "fb['Facebook_likes'] = fb['Facebook_likes'].apply(value_to_int)\n",
    "fb['Avg_Daily_Visitors'] = fb['Avg_Daily_Visitors'].apply(value_to_int)\n",
    "display(fb)\n",
    "# fb['Facebook_likes'] = np.log(fb['Facebook_likes'])\n",
    "\n",
    "display(fb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "76af237e-b8af-4514-8660-4d18aa4ed06f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# draw plot\n",
    "_ = sns.regplot(x='Facebook_likes', y= 'Avg_Daily_Visitors', data = fb, color = 'b', ci = None)\n",
    "plt.title('Scatter Plot for Fb likes & Avg Daily Visitors ')\n",
    "plt.xlabel('FB likes')\n",
    "plt.ylabel('Avg Daily Visitors')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "96e0703b-656e-407f-925d-f6dba856e95b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:     Avg_Daily_Visitors   R-squared:                       0.112\n",
      "Model:                            OLS   Adj. R-squared:                  0.112\n",
      "Method:                 Least Squares   F-statistic:                     187.5\n",
      "Date:                Sun, 15 May 2022   Prob (F-statistic):           2.79e-40\n",
      "Time:                        17:42:09   Log-Likelihood:                -27051.\n",
      "No. Observations:                1483   AIC:                         5.411e+04\n",
      "Df Residuals:                    1481   BIC:                         5.412e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==================================================================================\n",
      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "Intercept       2.628e+06   5.26e+05      4.999      0.000     1.6e+06    3.66e+06\n",
      "Facebook_likes    47.1452      3.443     13.694      0.000      40.392      53.898\n",
      "==============================================================================\n",
      "Omnibus:                     3428.398   Durbin-Watson:                   0.470\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         17249281.736\n",
      "Skew:                          21.601   Prob(JB):                         0.00\n",
      "Kurtosis:                     529.579   Cond. No.                     1.53e+05\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.53e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "\n",
      "Estimated model: y = 2627993.1225 + 47.1452 x\n",
      "The coefficients are 2627993.1225 and 47.1452\n"
     ]
    }
   ],
   "source": [
    "# Fit regression model \n",
    "fb_result = smf.ols('Avg_Daily_Visitors~ Facebook_likes', data=fb).fit()\n",
    "# Inspect the results\n",
    "print(fb_result.summary())\n",
    "\n",
    "b1 = fb_result.params[1]\n",
    "b0 = fb_result.params[0]\n",
    "\n",
    "print(f\"\\nEstimated model: y = {b0:.4f} + {b1:.4f} x\")\n",
    "print(f\"The coefficients are {b0:.4f} and {b1:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cef9edc9-3a30-46e2-9ad5-4f0d16400c8d",
   "metadata": {},
   "source": [
    "###    Standardized Residuals\n",
    "\n",
    "把殘差值標準化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b43cd759-9300-4cb5-a0a7-3083fabe1668",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Standardized Residuals \n",
      "\n",
      "[25.11668068 24.87919637 -7.83999886 ... -0.12954734 -0.12959195\n",
      " -0.13000602]\n",
      "mu =  -0.004974648439182354\n",
      "sigma =  1.0201488268013164\n"
     ]
    }
   ],
   "source": [
    "# studentized residual\n",
    "print(\"Standardized Residuals \\n\")\n",
    "st1, data1, ss3 = sso.summary_table(fb_result, alpha=0.05)\n",
    "SD = data1[:, 10]\n",
    "mu = np.mean(SD)\n",
    "sigma = np.std(SD)\n",
    "print(SD)\n",
    "print('mu = ', mu)\n",
    "print('sigma = ', sigma)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e96180b-d2c3-4f42-9445-b6394a2a76d6",
   "metadata": {},
   "source": [
    "### Normal test\n",
    "\n",
    "#### H0: Errors are normally distributed <br>\n",
    "#### H1: Errors are not normally distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d85c8c76-d35a-4a7e-9781-41822e536b5a",
   "metadata": {},
   "source": [
    "### QQ-plot and Histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "1b09cdeb-fbb4-4a45-9143-438ae5c19c61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts, bins, patches = plt.hist(SD, 6, density=False, facecolor='g', alpha=0.75)\n",
    "plt.xlabel('Avg Daily Visitors')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Standard Residuals Avg Daily Visitors & Fb likes')\n",
    "plt.grid(True)\n",
    "bin_centers = [np.mean(k) for k in zip(bins[:-1], bins[1:])]\n",
    "plt.show()\n",
    "fig = sm.qqplot(SD, stats.norm, fit=True, line='45')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b693d644-fd70-4b1a-8ccf-0d652a3e6c34",
   "metadata": {},
   "source": [
    "#### Shapiro Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4a409203-ddc5-4352-abe2-e62db06fec56",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shapiro Test\n",
      "Statistics=0.098, p=0.000\n"
     ]
    }
   ],
   "source": [
    "print('Shapiro Test')\n",
    "stat, p = stats.shapiro(SD)\n",
    "print('Statistics=%.3f, p=%.3f' % (stat, p))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7693f909-498c-4ba4-af8d-87e43f630ad4",
   "metadata": {},
   "source": [
    "Since pvalue is smaller than alpha(0.05), H0 is rejected. Errors are not normally distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecffb5a5-3939-40ff-8447-9b90c2d1e412",
   "metadata": {},
   "source": [
    "### Chi test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7e269596-b0db-4772-b5f2-56a55f0e0073",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n"
     ]
    }
   ],
   "source": [
    "chi2_pval = Chi_Square_for_Normality(SD, 6, 0.05) \n",
    "print(chi2_pval)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e95a226-c5ee-4773-9764-ec0a79ca27bb",
   "metadata": {},
   "source": [
    "### H0: Homoscedasticity <br>\n",
    "### H1: Heteroscedasticity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a5c62dea-2a42-43df-bd02-7713fadfc6cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "y_pre = data1[:, 2]\n",
    "plt.plot(y_pre, SD, 'o', color = 'gray')\n",
    "plt.axhline(y=0, color = 'blue')\n",
    "plt.axhline(y=2, color = 'red')\n",
    "plt.axhline(y=-2, color = 'red')\n",
    "plt.title('Standardized Residual Plot')\n",
    "plt.xlabel('Odometer')\n",
    "plt.ylabel('Standardized Residual')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0372f992-66a2-4b0e-ab27-842678eb73b4",
   "metadata": {},
   "source": [
    "The result seems to be Homoscedasticity. The spread of data points doesn't change much."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74a33490-b468-4689-ae49-0bceaa0f0804",
   "metadata": {},
   "source": [
    "### Runs test\n",
    "\n",
    "測試independence <br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b22e119e-5ee8-4dfa-900e-d1bd6fe80798",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Randomness Test using Runs Test\n",
      " - H0: Randomness exists.\n",
      " - H1: Randomness does not exist\n",
      "\n",
      "runs =  298\n",
      "n1 =  742\n",
      "n2 =  741\n",
      "\n",
      "runs_exp =  742.4996628455833\n",
      "stan_dev =  19.248363414968605\n",
      "z =  -23.09285487097129\n",
      "pval_z =  5.462392283224451e-118\n",
      "\n",
      "Since p-value < 0.05, we reject H0 and conclude randomness does not exist.\n"
     ]
    }
   ],
   "source": [
    "Randomness(SD)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e689e41-f8c4-441d-9070-6fcbab88b097",
   "metadata": {},
   "source": [
    "Since pvalue is smaller than alpha(0.05), H0 is rejected. Randomness doen't exist."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a07b171-6664-4d2e-9e73-bc03adbd33d8",
   "metadata": {},
   "source": [
    "## Outliers\n",
    "\n",
    "當error >2 or <-2 ,可以當成outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bc125440-9ef6-4b0c-b367-260d3cd27301",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outliers by SD = \n",
      "\n",
      "0     25.116681\n",
      "1     24.879196\n",
      "2     -7.839999\n",
      "3      5.624399\n",
      "4      5.748741\n",
      "5      4.753084\n",
      "6      3.175641\n",
      "7      3.800599\n",
      "8      2.866942\n",
      "9      3.020082\n",
      "10     2.278956\n",
      "11     3.071482\n",
      "12     2.757912\n",
      "13     2.153594\n",
      "14     2.250919\n",
      "15     2.235249\n",
      "16     2.192857\n",
      "Name: SD, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "fb_c = pd.DataFrame(SD,columns = ['SD'])\n",
    "filter = (fb_c['SD'] < -2) | (fb_c['SD'] > 2)\n",
    "print(\"Outliers by SD = \\n\")\n",
    "print(fb_c['SD'].loc[filter])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aa4a40a-0d90-4bf6-b8cb-e0520db8821a",
   "metadata": {},
   "source": [
    "### Influential Observation\n",
    "\n",
    "足以大幅影響回歸線斜率的點"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "804bea0d-f2e8-4cb9-b625-0d5d8b9c864f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Influential Observations \n",
      "\n",
      "[9.03595271e-04 6.76298160e-04 9.96563195e-01 ... 6.75094771e-04\n",
      " 6.75092360e-04 6.75019433e-04]\n",
      "Influential Observations by hi = \n",
      "\n",
      "2    0.996563\n",
      "Name: hi, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nInfluential Observations \\n\")\n",
    "x_data = fb['Facebook_likes'].values\n",
    "y_data = fb['Avg_Daily_Visitors'].values\n",
    "cov_mat1 = np.cov(y_data, x_data)\n",
    "x_data_bar = x_data.mean()\n",
    "data_nobs = len(x_data)\n",
    "h_val = 1 / data_nobs + (x_data - x_data_bar) ** 2 / (data_nobs - 1) / cov_mat1[1,1]\n",
    "print(h_val)\n",
    "fb_h = pd.DataFrame(h_val,columns = ['hi'])\n",
    "filter = (fb_h['hi'] > 6 / data_nobs )\n",
    "print(\"Influential Observations by hi = \\n\")\n",
    "print(fb_h['hi'].loc[filter])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02e97423-e0e3-40b1-8a4b-e2159d88dfe5",
   "metadata": {},
   "source": [
    "### Stdandard errors\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5b702ab4-9573-4341-bb10-29c2b806be33",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE:  409345482822249.44\n",
      "Standard errors:  20232288.126216706\n"
     ]
    }
   ],
   "source": [
    "s2_e = fb_result.mse_resid\n",
    "print('MSE: ', s2_e)\n",
    "s_e = fb_result.mse_resid ** 0.5\n",
    "print('Standard errors: ', s_e)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d8c8a1e-d236-47f7-951f-dd235da037d6",
   "metadata": {},
   "source": [
    "### Coefficient of correlation (and determination)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2e378bbf-cfec-4986-b267-b1dcd6174495",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SSR =  6.062406600597514e+17\n",
      "R2 =  0.11239419506359305\n"
     ]
    }
   ],
   "source": [
    "SSR = fb_result.ssr\n",
    "# SST = SSR + SSE\n",
    "R2 = fb_result.rsquared\n",
    "print(\"SSR = \", SSR)\n",
    "print(\"R2 = \", R2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "414ef4ab-e14b-49d9-9071-d0614d135d89",
   "metadata": {},
   "source": [
    "### Testing Coefficient of correlation\n",
    "H0: r = 0 <br>\n",
    "H1: r $\\neq$ 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "884c2e90-b6bc-4a0b-8ba7-f95b92ff76a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r =  0.3352524348361895\n",
      "t_critical =  1.961567075831078\n",
      "t =  13.694286293732866\n",
      "p_value =  2.7921815998602387e-40\n"
     ]
    }
   ],
   "source": [
    "cor_mat = np.corrcoef(fb[['Avg_Daily_Visitors', 'Facebook_likes']].values, rowvar = False)\n",
    "n = fb['Avg_Daily_Visitors'].shape[0]\n",
    "# print(n)\n",
    "r_t_value = c_of_c_test(cor_mat[1,0], n,0.05)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "204e032f-5b28-43d7-87cb-2f739503f311",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ae54b1d3-b890-484e-a764-821778762f51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Facebook_likes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>116401260</td>\n",
       "      <td>5.899897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118921355</td>\n",
       "      <td>6.165418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66935532</td>\n",
       "      <td>7.420579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>79499959</td>\n",
       "      <td>4.189655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>60614015</td>\n",
       "      <td>2.833213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1522</th>\n",
       "      <td>7462</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1523</th>\n",
       "      <td>7964</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1524</th>\n",
       "      <td>7886</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1525</th>\n",
       "      <td>7361</td>\n",
       "      <td>2.197225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1526</th>\n",
       "      <td>10678</td>\n",
       "      <td>5.549076</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1478 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Avg_Daily_Visitors  Facebook_likes\n",
       "3              116401260        5.899897\n",
       "4              118921355        6.165418\n",
       "6               66935532        7.420579\n",
       "7               79499959        4.189655\n",
       "8               60614015        2.833213\n",
       "...                  ...             ...\n",
       "1522                7462        0.000000\n",
       "1523                7964        0.000000\n",
       "1524                7886        0.000000\n",
       "1525                7361        2.197225\n",
       "1526               10678        5.549076\n",
       "\n",
       "[1478 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 563511.32332 * x + -7464.02667 * x^2 + 371583.85633\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data points seem to fit the curve\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Facebook_likes</th>\n",
       "      <th>Facebook_likes_2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>116401260</td>\n",
       "      <td>5.899897</td>\n",
       "      <td>34.808789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118921355</td>\n",
       "      <td>6.165418</td>\n",
       "      <td>38.012377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66935532</td>\n",
       "      <td>7.420579</td>\n",
       "      <td>55.064991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>79499959</td>\n",
       "      <td>4.189655</td>\n",
       "      <td>17.553207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>60614015</td>\n",
       "      <td>2.833213</td>\n",
       "      <td>8.027098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1522</th>\n",
       "      <td>7462</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1523</th>\n",
       "      <td>7964</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1524</th>\n",
       "      <td>7886</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1525</th>\n",
       "      <td>7361</td>\n",
       "      <td>2.197225</td>\n",
       "      <td>4.827796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1526</th>\n",
       "      <td>10678</td>\n",
       "      <td>5.549076</td>\n",
       "      <td>30.792245</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1478 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Avg_Daily_Visitors  Facebook_likes  Facebook_likes_2\n",
       "3              116401260        5.899897         34.808789\n",
       "4              118921355        6.165418         38.012377\n",
       "6               66935532        7.420579         55.064991\n",
       "7               79499959        4.189655         17.553207\n",
       "8               60614015        2.833213          8.027098\n",
       "...                  ...             ...               ...\n",
       "1522                7462        0.000000          0.000000\n",
       "1523                7964        0.000000          0.000000\n",
       "1524                7886        0.000000          0.000000\n",
       "1525                7361        2.197225          4.827796\n",
       "1526               10678        5.549076         30.792245\n",
       "\n",
       "[1478 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.029\n",
      "Model:                            OLS   Adj. R-squared:                  0.028\n",
      "Method:                 Least Squares   F-statistic:                     22.26\n",
      "Date:                Sun, 15 May 2022   Prob (F-statistic):           2.99e-10\n",
      "Time:                        17:42:09   Log-Likelihood:                -25490.\n",
      "No. Observations:                1478   AIC:                         5.099e+04\n",
      "Df Residuals:                    1475   BIC:                         5.100e+04\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================\n",
      "                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------\n",
      "const             3.716e+05   3.67e+05      1.011      0.312   -3.49e+05    1.09e+06\n",
      "Facebook_likes_2 -7463.8787   2.57e+04     -0.291      0.771   -5.78e+04    4.29e+04\n",
      "Facebook_likes    5.635e+05   2.19e+05      2.573      0.010    1.34e+05    9.93e+05\n",
      "==============================================================================\n",
      "Omnibus:                     2169.221   Durbin-Watson:                   0.156\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           622725.855\n",
      "Skew:                           8.654   Prob(JB):                         0.00\n",
      "Kurtosis:                     102.057   Cond. No.                         57.1\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "Estimated model: y = 371585.0898 -7463.8787 Facebook_likes_2 + 563510.1430 Facebook_likes"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fb['Facebook_likes'] = np.log(fb['Facebook_likes'])\n",
    "fb = fb.drop([0,1,2,5,136])\n",
    "display(fb)\n",
    "y_var = fb['Avg_Daily_Visitors'].values\n",
    "xnames = ['Facebook_likes']\n",
    "for aname in xnames:\n",
    "    x_var = fb[aname].values\n",
    "    popt, _ = curve_fit(objective, x_var, y_var)\n",
    "    a, b, c = popt\n",
    "    print('y = %.5f * x + %.5f * x^2 + %.5f' % (a, b, c))\n",
    "    plt.scatter(x_var, y_var)\n",
    "    x_line = np.arange(min(x_var), max(x_var), 1)\n",
    "    y_line = objective(x_line, a, b, c)\n",
    "    plt.plot(x_line, y_line, '--', color='red')\n",
    "    plt.xlabel(aname)\n",
    "    plt.ylabel('Avg_Daily_Visitors')\n",
    "    plt.show()\n",
    "    \n",
    "print(\"The data points seem to fit the curve\")\n",
    "\n",
    "y_data_b = fb['Avg_Daily_Visitors']\n",
    "fb['Facebook_likes_2'] = fb['Facebook_likes'] ** 2\n",
    "X_data_ar_b = np.array([fb['Facebook_likes_2'], fb['Facebook_likes']])\n",
    "display(fb)\n",
    "X_data_b_T = X_data_ar_b.T\n",
    "X_data_b = pd.DataFrame(X_data_b_T, columns = ['Facebook_likes_2', 'Facebook_likes'])\n",
    "X_data_b = sm.add_constant(X_data_b)\n",
    "olsmod_b = sm.OLS(y_data_b.values, X_data_b)\n",
    "result_reg = olsmod_b.fit()\n",
    "print(result_reg.summary())\n",
    "Print(result_reg)\n",
    "\n",
    "corr2c = fb.corr()\n",
    "_ = sns.heatmap(corr2c, annot=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71f28b7b-0710-4f6c-ae14-4c95e7700f0a",
   "metadata": {},
   "source": [
    "To solve the problem of multicollinearity. We let Facebook_likes variable minus its average."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b47b9e4d-6f9a-40a8-9284-2d4c5dc785c2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 563511.32332 * x + -7464.02667 * x^2 + 371583.85633\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The data points seem to fit the curve\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Facebook_likes_avg</th>\n",
       "      <th>Facebook_likes_avg2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>116401260</td>\n",
       "      <td>2.912036</td>\n",
       "      <td>8.479956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118921355</td>\n",
       "      <td>3.177557</td>\n",
       "      <td>10.096867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66935532</td>\n",
       "      <td>4.432718</td>\n",
       "      <td>19.648988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>79499959</td>\n",
       "      <td>1.201794</td>\n",
       "      <td>1.444308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>60614015</td>\n",
       "      <td>-0.154648</td>\n",
       "      <td>0.023916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1522</th>\n",
       "      <td>7462</td>\n",
       "      <td>-2.987861</td>\n",
       "      <td>8.927313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1523</th>\n",
       "      <td>7964</td>\n",
       "      <td>-2.987861</td>\n",
       "      <td>8.927313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1524</th>\n",
       "      <td>7886</td>\n",
       "      <td>-2.987861</td>\n",
       "      <td>8.927313</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1525</th>\n",
       "      <td>7361</td>\n",
       "      <td>-0.790636</td>\n",
       "      <td>0.625106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1526</th>\n",
       "      <td>10678</td>\n",
       "      <td>2.561215</td>\n",
       "      <td>6.559823</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1478 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Avg_Daily_Visitors  Facebook_likes_avg  Facebook_likes_avg2\n",
       "3              116401260            2.912036             8.479956\n",
       "4              118921355            3.177557            10.096867\n",
       "6               66935532            4.432718            19.648988\n",
       "7               79499959            1.201794             1.444308\n",
       "8               60614015           -0.154648             0.023916\n",
       "...                  ...                 ...                  ...\n",
       "1522                7462           -2.987861             8.927313\n",
       "1523                7964           -2.987861             8.927313\n",
       "1524                7886           -2.987861             8.927313\n",
       "1525                7361           -0.790636             0.625106\n",
       "1526               10678            2.561215             6.559823\n",
       "\n",
       "[1478 rows x 3 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.029\n",
      "Model:                            OLS   Adj. R-squared:                  0.028\n",
      "Method:                 Least Squares   F-statistic:                     22.26\n",
      "Date:                Sun, 15 May 2022   Prob (F-statistic):           2.99e-10\n",
      "Time:                        17:42:10   Log-Likelihood:                -25490.\n",
      "No. Observations:                1478   AIC:                         5.099e+04\n",
      "Df Residuals:                    1475   BIC:                         5.100e+04\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=======================================================================================\n",
      "                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "---------------------------------------------------------------------------------------\n",
      "const                1.989e+06   2.59e+05      7.688      0.000    1.48e+06     2.5e+06\n",
      "Facebook_likes_avg2 -7463.8787   2.57e+04     -0.291      0.771   -5.78e+04    4.29e+04\n",
      "Facebook_likes_avg   5.189e+05   9.18e+04      5.651      0.000    3.39e+05    6.99e+05\n",
      "==============================================================================\n",
      "Omnibus:                     2169.221   Durbin-Watson:                   0.156\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):           622725.855\n",
      "Skew:                           8.654   Prob(JB):                         0.00\n",
      "Kurtosis:                     102.057   Cond. No.                         15.4\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "Estimated model: y = 1988642.6912 -7463.8787 Facebook_likes_avg2 + 518908.0788 Facebook_likes_avg\n",
      "Facebook_likes_avg means the value of Facebook_likes - its average.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_var = fb['Avg_Daily_Visitors'].values\n",
    "xnames = ['Facebook_likes']\n",
    "for aname in xnames:\n",
    "    x_var = fb[aname].values\n",
    "    popt, _ = curve_fit(objective, x_var, y_var)\n",
    "    a, b, c = popt\n",
    "    print('y = %.5f * x + %.5f * x^2 + %.5f' % (a, b, c))\n",
    "    plt.scatter(x_var, y_var)\n",
    "    x_line = np.arange(min(x_var), max(x_var), 1)\n",
    "    y_line = objective(x_line, a, b, c)\n",
    "    plt.plot(x_line, y_line, '--', color='red')\n",
    "    plt.xlabel(aname)\n",
    "    plt.ylabel('Avg_Daily_Visitors')\n",
    "    plt.show()\n",
    "    \n",
    "print(\"The data points seem to fit the curve\")\n",
    "\n",
    "\n",
    "dep_var = fb['Avg_Daily_Visitors']\n",
    "indep_var = fb[['Facebook_likes']]\n",
    "#Change the names so that we will not get confused\n",
    "indep_var.columns = ['Facebook_likes_avg']\n",
    "indep_mean = indep_var.mean()\n",
    "indep_var = indep_var - indep_mean\n",
    "indep_var['Facebook_likes_avg2'] = indep_var['Facebook_likes_avg'] ** 2\n",
    "fbb = indep_var.copy()\n",
    "fbb.insert(0, 'Avg_Daily_Visitors', dep_var)\n",
    "display(fbb)\n",
    "\n",
    "\n",
    "corr2c = fbb.corr()\n",
    "_ = sns.heatmap(corr2c, annot=True)\n",
    "\n",
    "y_data_b = fbb['Avg_Daily_Visitors']\n",
    "X_data_ar_b = np.array([fbb['Facebook_likes_avg2'], fbb['Facebook_likes_avg']])\n",
    "X_data_b_T = X_data_ar_b.T\n",
    "X_data_b = pd.DataFrame(X_data_b_T, columns = ['Facebook_likes_avg2', 'Facebook_likes_avg'])\n",
    "X_data_b = sm.add_constant(X_data_b)\n",
    "olsmod_b = sm.OLS(y_data_b.values, X_data_b)\n",
    "result_reg = olsmod_b.fit()\n",
    "print(result_reg.summary())\n",
    "Print(result_reg)\n",
    "print(\"\\nFacebook_likes_avg means the value of Facebook_likes - its average.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9ce054d8-4916-41d2-b70e-6c74ec559159",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Standardized Residuals\n",
      "[15.10892565 15.42975362  8.40331689 ... -0.04866079 -0.2094169\n",
      " -0.43574539]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Facebook_likes_avg</th>\n",
       "      <th>Facebook_likes_avg2</th>\n",
       "      <th>hii</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>116401260</td>\n",
       "      <td>2.912036</td>\n",
       "      <td>8.479956</td>\n",
       "      <td>0.001736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118921355</td>\n",
       "      <td>3.177557</td>\n",
       "      <td>10.096867</td>\n",
       "      <td>0.001812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66935532</td>\n",
       "      <td>4.432718</td>\n",
       "      <td>19.648988</td>\n",
       "      <td>0.002869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>79499959</td>\n",
       "      <td>1.201794</td>\n",
       "      <td>1.444308</td>\n",
       "      <td>0.001510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>60614015</td>\n",
       "      <td>-0.154648</td>\n",
       "      <td>0.023916</td>\n",
       "      <td>0.001146</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Avg_Daily_Visitors  Facebook_likes_avg  Facebook_likes_avg2       hii\n",
       "3           116401260            2.912036             8.479956  0.001736\n",
       "4           118921355            3.177557            10.096867  0.001812\n",
       "6            66935532            4.432718            19.648988  0.002869\n",
       "7            79499959            1.201794             1.444308  0.001510\n",
       "8            60614015           -0.154648             0.023916  0.001146"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st_b, data, ss2_b = sso.summary_table(result_reg, alpha=0.05)\n",
    "y_pre_b = data[:, 2]\n",
    "SD = data[:, 10]\n",
    "print(\"\\nStandardized Residuals\")\n",
    "print(SD)\n",
    "X_b = np.array(X_data_b)\n",
    "H_b = np.matmul(X_b, np.linalg.solve(np.matmul(X_b.T, X_b), X_b.T))\n",
    "fbb['hii'] = np.diagonal(H_b)\n",
    "e_std_b = (result_reg.mse_resid * (1 - np.diagonal(H_b))) ** 0.5\n",
    "fbb.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0eb58dbc-4d5a-4cf0-9155-0d680ebc10cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " \n",
      "\n",
      "Normality test for errors using Shapiro Test or Chi-square Test\n",
      " - H0: Errors are normally distributed.\n",
      " - H1: Errors are not normally distributed.\n",
      "\n",
      "pvalue of Chi square = 0.0\n",
      "pvalue of Shapiro Test = 0.0\n",
      "\n",
      "Since p-value < 0.05, we reject H0 and conclude errors are not normally distributed.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# mu = np.mean(SD)\n",
    "# sigma = np.std(SD)\n",
    "\n",
    "#_ = plt.hist(SD, bins = 'auto')\n",
    "fig, ax = plt.subplots()\n",
    "counts, bins, patches = plt.hist(SD, 6, density=False, facecolor='g', alpha=0.75)\n",
    "plt.xlabel('Standardized Residuals')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Standardized Residuals: Avg_Daily_Visitors')\n",
    "plt.grid(True)\n",
    "bin_centers = [np.mean(k) for k in zip(bins[:-1], bins[1:])]\n",
    "plt.show()\n",
    "\n",
    "fig = sm.qqplot(SD, stats.norm, fit=True, line='45')\n",
    "print(\" \\n\")\n",
    "\n",
    "Normality(SD)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3fd18695-17dc-4210-b38a-30bc9d1344b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Homoscedasticity Test\n",
      " - H0: Homoscedasticity\n",
      " - H1: Heteroscedasticity\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "Homoscedasticity(data,'Predicted y value')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7943a86-a921-4291-b9f8-5ca152e180b6",
   "metadata": {},
   "source": [
    "The result seems to be Homoscedasticity. The spread of data points doesn't seem to change much."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e0745b4d-81dd-4275-b353-3e9c2535e0fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Randomness Test using Runs Test\n",
      " - H0: Randomness exists.\n",
      " - H1: Randomness does not exist\n",
      "\n",
      "runs =  664\n",
      "n1 =  739\n",
      "n2 =  739\n",
      "\n",
      "runs_exp =  740.0\n",
      "stan_dev =  19.215874446352483\n",
      "z =  -3.955063310398875\n",
      "pval_z =  7.651438716274607e-05\n",
      "\n",
      "Since p-value < 0.05, we reject H0 and conclude randomness does not exist.\n"
     ]
    }
   ],
   "source": [
    "Randomness(SD)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27963d76-63f3-450a-86ac-8055e67454cb",
   "metadata": {},
   "source": [
    "reject H0 if runs >=10 or runs <=2. <br>\n",
    "the runs = 10 <br>\n",
    "As a result,  H0 is rejected, Randomness does not exist."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a9e44f7-f926-4f2a-9ee5-e0c7b7c258b3",
   "metadata": {},
   "source": [
    "The required conditions are not satisfied completely, the model may have some problems."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52950eb0-7b95-48b1-8bc3-11df5037c398",
   "metadata": {},
   "source": [
    "### Outliers & Influential Observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "85dec48d-9da1-4aaf-a8c5-b0a47d2fa637",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outliers by SD = \n",
      "\n",
      "0     15.108926\n",
      "1     15.429754\n",
      "2      8.403317\n",
      "3     10.283920\n",
      "4      7.849516\n",
      "5      8.300237\n",
      "6      5.966161\n",
      "7      8.214880\n",
      "8      7.547067\n",
      "9      5.687384\n",
      "10     5.973492\n",
      "11     5.941323\n",
      "12     6.000252\n",
      "13     4.970867\n",
      "14     3.480354\n",
      "15     3.016994\n",
      "16     5.011326\n",
      "17     3.745015\n",
      "18     2.761198\n",
      "19     2.927995\n",
      "20     2.661356\n",
      "21     3.619452\n",
      "22     2.714550\n",
      "23     2.821596\n",
      "24     4.265768\n",
      "25     2.113779\n",
      "26     3.602183\n",
      "27     2.747649\n",
      "29     2.619692\n",
      "32     2.276615\n",
      "33     2.825416\n",
      "36     3.171861\n",
      "40     2.321445\n",
      "41     2.731899\n",
      "42     2.368447\n",
      "46     2.554275\n",
      "55     2.116161\n",
      "Name: SD, dtype: float64\n",
      "\n",
      "Sample [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 37, 41, 42, 43, 47, 56] are outliers.\n",
      "h_level =  0.006089309878213802\n",
      " \n",
      "\n",
      "Influential Observations by hi = \n",
      "\n",
      "24      0.011500\n",
      "36      0.019449\n",
      "47      0.009188\n",
      "51      0.006582\n",
      "59      0.034964\n",
      "111     0.008675\n",
      "125     0.020323\n",
      "129     0.006570\n",
      "175     0.009501\n",
      "192     0.006240\n",
      "194     0.012481\n",
      "223     0.013998\n",
      "242     0.007943\n",
      "243     0.007463\n",
      "290     0.007728\n",
      "306     0.008046\n",
      "328     0.007610\n",
      "366     0.008178\n",
      "414     0.014087\n",
      "432     0.013998\n",
      "481     0.027080\n",
      "486     0.007958\n",
      "549     0.027080\n",
      "695     0.027013\n",
      "739     0.009589\n",
      "826     0.015327\n",
      "865     0.020342\n",
      "981     0.011204\n",
      "990     0.008911\n",
      "1045    0.008447\n",
      "1177    0.006496\n",
      "1248    0.007326\n",
      "1262    0.027013\n",
      "1305    0.006630\n",
      "1458    0.007917\n",
      "1472    0.027013\n",
      "1479    0.027080\n",
      "1515    0.027013\n",
      "Name: hii, dtype: float64\n",
      "\n",
      "Sample [25, 37, 48, 52, 60, 112, 126, 130, 176, 193, 195, 224, 243, 244, 291, 307, 329, 367, 415, 433, 482, 487, 550, 696, 740, 827, 866, 982, 991, 1046, 1178, 1249, 1263, 1306, 1459, 1473, 1480, 1516] are influential observations.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.207419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.266282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.195331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.016258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000197</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         CD\n",
       "0  0.207419\n",
       "1  0.266282\n",
       "2  0.195331\n",
       "3  0.016258\n",
       "4  0.000197"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Influential Observations by Cook's Distances = \n",
      "\n",
      "Series([], Name: CD, dtype: float64)\n",
      "\n",
      "There isnt any influential observation.\n"
     ]
    }
   ],
   "source": [
    "Outlier(SD)\n",
    "\n",
    "# ------------------------\n",
    "X = fbb[['Facebook_likes_avg','Facebook_likes_avg2']]\n",
    "df = fbb\n",
    "influential_multi(X,df,data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb3a57a5-980e-4f1b-b206-73b2f683d06f",
   "metadata": {},
   "source": [
    "### Model Assess"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afe4f499-9390-401c-91bb-76b8a0191da5",
   "metadata": {},
   "source": [
    "F test:<br>\n",
    "H0: $\\beta_1 = \\beta_2 = .... = \\beta_k = 0$ <br>\n",
    "H1: at least one $\\beta_i$ is not 0."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2366b63-cb0b-4799-b212-ba98b4d6d7ad",
   "metadata": {},
   "source": [
    "T test: <br>\n",
    "H0: $\\beta_i = 0$ <br>\n",
    "H1: $\\beta_i \\neq 0$ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "844d5405-42d9-4ebb-ac79-335468bbba5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Check Standard error\n",
      "standard error =  7483194.871738359\n",
      "mean of y 1939119.9343707713\n",
      "std of y 7590152.151539416\n",
      "\n",
      " Check R-squared\n",
      "R-squared =  0.029300800989355058\n",
      "Adjusted R-squared =  0.027984598685611872\n",
      "2.9301% of variation in Avg_Daily_Visitors is explained by the variations in independent variables. The rest remains unexplained.\n",
      "The gap between R-squared and Adjusted R-squared is smaller than 0.06, The model is fine.\n",
      "\n",
      " Conduct F test\n",
      "F value =  22.261624148525115\n",
      "SSR =  2493222007149776.0 df =  2.0 MSR =  1246611003574888.0\n",
      "SSE =  8.259735309540662e+16 df =  1475.0 MSE =  55998205488411.27\n",
      "F =  22.261624148525115\n",
      "F test =  <F test: F=array([[22.26162415]]), p=2.9850049333315257e-10, df_denom=1.48e+03, df_num=2>\n",
      "F p-value =  2.985004933330296e-10\n",
      "Since p-value is smaller than 0.05, H0 is rejected. The model is valid.\n",
      "\n",
      " Conduct T test\n",
      "The pvalue of Facebook_likes_avg2 is bigger than 0.05, H0 is not rejected. Facebook_likes_avg2 is not related to Avg_Daily_Visitors\n",
      "The pvalue of Facebook_likes_avg is smaller than 0.05, H0 is rejected. Facebook_likes_avg is related to Avg_Daily_Visitors\n"
     ]
    }
   ],
   "source": [
    "Model_Assess(result_reg,fbb['Avg_Daily_Visitors'],'Avg_Daily_Visitors')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b283426-3be4-4e27-b5f0-ddea7ce4a364",
   "metadata": {},
   "source": [
    "### Multicollinearity & autocorrelation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "eedf18e1-eac5-47f1-aa6d-94bd61e7f9a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_square_sum =  1478.2906456934638\n",
      "size =  1478\n",
      "x_d =  [0. 0. 0. ... 0. 0. 0.]\n",
      "x_d =  [ 0.00000000e+00  3.20827965e-01 -7.02643673e+00 ... -1.04359385e-05\n",
      " -1.60756113e-01 -2.26328494e-01]\n",
      "According to table of Durbin-Watson test, dL is 0.697, dU is 1.641. d is 0.1557.\n",
      "\n",
      "Conduct Autocorrelation test\n",
      "H0: The data are not positively first-order correlated.\n",
      "H1: The data are positively first-order correlated.\n",
      "\n",
      "d < dL. H0 is rejected.There is enough evidence to show that positive first-order correlation exists.\n",
      "\n",
      "H0: The data are not negatively first-order correlated.\n",
      "H1: The data are negatively first-order correlated.\n",
      "\n",
      "d < 4 - dU. H0 is not rejected.There is not enough evidence to show that negative first-order correlation exists.\n"
     ]
    }
   ],
   "source": [
    "st, data, ss2 = sso.summary_table(result_reg, alpha=0.05)\n",
    "SD = data[:, 10]\n",
    "\n",
    "Id1 = data[:, 0]\n",
    "plt.plot(Id1, SD, 'o', color = 'gray')\n",
    "plt.axhline(y=0, color = 'blue')\n",
    "plt.axhline(y=2, color = 'red')\n",
    "plt.axhline(y=-2, color = 'red')\n",
    "plt.title('Standardized Residual Plot')\n",
    "plt.xlabel('Observation No.')\n",
    "plt.ylabel('Standardized Residual')\n",
    "plt.show()\n",
    "\n",
    "Durbin_Watson_test(SD,0.697,1.641)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01c14211-ecc2-4957-8499-ee7f08e828df",
   "metadata": {},
   "source": [
    "For multicollinearity,\n",
    "\n",
    "There is multicollinearity.\n",
    "\n",
    "We can say it's a result of letting Facebook_likes_avg = Facebook_likes - its average. To avoid multicollinearity."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97fa4e93-40b3-41f5-a070-8ba7e2d71f51",
   "metadata": {},
   "source": [
    "## Twitter mentions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f92121f6-f1f7-4ff0-b2e0-19f048b7f5a3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Facebook_likes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>515007350</td>\n",
       "      <td>94200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>506457282</td>\n",
       "      <td>13500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>270071255</td>\n",
       "      <td>5870000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>116401260</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118921355</td>\n",
       "      <td>476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1522</th>\n",
       "      <td>7462</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1523</th>\n",
       "      <td>7964</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1524</th>\n",
       "      <td>7886</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1525</th>\n",
       "      <td>7361</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1526</th>\n",
       "      <td>10678</td>\n",
       "      <td>257</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1483 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Avg_Daily_Visitors  Facebook_likes\n",
       "0              515007350           94200\n",
       "1              506457282           13500\n",
       "2              270071255         5870000\n",
       "3              116401260             365\n",
       "4              118921355             476\n",
       "...                  ...             ...\n",
       "1522                7462               1\n",
       "1523                7964               1\n",
       "1524                7886               1\n",
       "1525                7361               9\n",
       "1526               10678             257\n",
       "\n",
       "[1483 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Avg_Daily_Visitors</th>\n",
       "      <th>Facebook_likes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>515007350</td>\n",
       "      <td>94200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>506457282</td>\n",
       "      <td>13500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>270071255</td>\n",
       "      <td>5870000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>116401260</td>\n",
       "      <td>365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>118921355</td>\n",
       "      <td>476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1522</th>\n",
       "      <td>7462</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1523</th>\n",
       "      <td>7964</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1524</th>\n",
       "      <td>7886</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1525</th>\n",
       "      <td>7361</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1526</th>\n",
       "      <td>10678</td>\n",
       "      <td>257</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1483 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Avg_Daily_Visitors  Facebook_likes\n",
       "0              515007350           94200\n",
       "1              506457282           13500\n",
       "2              270071255         5870000\n",
       "3              116401260             365\n",
       "4              118921355             476\n",
       "...                  ...             ...\n",
       "1522                7462               1\n",
       "1523                7964               1\n",
       "1524                7886               1\n",
       "1525                7361               9\n",
       "1526               10678             257\n",
       "\n",
       "[1483 rows x 2 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fb = df[df[\"Twitter_mentions\"].str.contains(\"-\")==False]\n",
    "fb = fb[['Avg_Daily_Visitors','Facebook_likes']]\n",
    "fb.reset_index(inplace = True, drop = True)\n",
    "fb.dropna(inplace=True)\n",
    "fb['Facebook_likes'] = fb['Facebook_likes'].apply(value_to_int)\n",
    "fb['Avg_Daily_Visitors'] = fb['Avg_Daily_Visitors'].apply(value_to_int)\n",
    "display(fb)\n",
    "# fb['Facebook_likes'] = np.log(fb['Facebook_likes'])\n",
    "\n",
    "display(fb)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "035d0e20-14f8-430c-9532-a6b843480183",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# draw plot\n",
    "_ = sns.regplot(x='Facebook_likes', y= 'Avg_Daily_Visitors', data = fb, color = 'b', ci = None)\n",
    "plt.title('Scatter Plot for Fb likes & Avg Daily Visitors ')\n",
    "plt.xlabel('FB likes')\n",
    "plt.ylabel('Avg Daily Visitors')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6958dae5-ace3-40f3-8861-db0e9a8dc76b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:     Avg_Daily_Visitors   R-squared:                       0.112\n",
      "Model:                            OLS   Adj. R-squared:                  0.112\n",
      "Method:                 Least Squares   F-statistic:                     187.5\n",
      "Date:                Sun, 15 May 2022   Prob (F-statistic):           2.79e-40\n",
      "Time:                        17:42:09   Log-Likelihood:                -27051.\n",
      "No. Observations:                1483   AIC:                         5.411e+04\n",
      "Df Residuals:                    1481   BIC:                         5.412e+04\n",
      "Df Model:                           1                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==================================================================================\n",
      "                     coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------\n",
      "Intercept       2.628e+06   5.26e+05      4.999      0.000     1.6e+06    3.66e+06\n",
      "Facebook_likes    47.1452      3.443     13.694      0.000      40.392      53.898\n",
      "==============================================================================\n",
      "Omnibus:                     3428.398   Durbin-Watson:                   0.470\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         17249281.736\n",
      "Skew:                          21.601   Prob(JB):                         0.00\n",
      "Kurtosis:                     529.579   Cond. No.                     1.53e+05\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.53e+05. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n",
      "\n",
      "Estimated model: y = 2627993.1225 + 47.1452 x\n",
      "The coefficients are 2627993.1225 and 47.1452\n"
     ]
    }
   ],
   "source": [
    "# Fit regression model \n",
    "fb_result = smf.ols('Avg_Daily_Visitors~ Facebook_likes', data=fb).fit()\n",
    "# Inspect the results\n",
    "print(fb_result.summary())\n",
    "\n",
    "b1 = fb_result.params[1]\n",
    "b0 = fb_result.params[0]\n",
    "\n",
    "print(f\"\\nEstimated model: y = {b0:.4f} + {b1:.4f} x\")\n",
    "print(f\"The coefficients are {b0:.4f} and {b1:.4f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a56cbe6f-0481-4824-9546-3816fc6c444e",
   "metadata": {},
   "source": [
    "###    Standardized Residuals\n",
    "\n",
    "把殘差值標準化"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b4a3f0db-4786-4f5f-90f3-5f7b68bce801",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Standardized Residuals \n",
      "\n",
      "[25.11668068 24.87919637 -7.83999886 ... -0.12954734 -0.12959195\n",
      " -0.13000602]\n",
      "mu =  -0.004974648439182354\n",
      "sigma =  1.0201488268013164\n"
     ]
    }
   ],
   "source": [
    "# studentized residual\n",
    "print(\"Standardized Residuals \\n\")\n",
    "st1, data1, ss3 = sso.summary_table(fb_result, alpha=0.05)\n",
    "SD = data1[:, 10]\n",
    "mu = np.mean(SD)\n",
    "sigma = np.std(SD)\n",
    "print(SD)\n",
    "print('mu = ', mu)\n",
    "print('sigma = ', sigma)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2c2eceb-c11a-4d08-add8-06a773619455",
   "metadata": {},
   "source": [
    "### Normal test\n",
    "\n",
    "#### H0: Errors are normally distributed <br>\n",
    "#### H1: Errors are not normally distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eef202ba-8eff-4bec-b0fb-4a95ac8b5444",
   "metadata": {},
   "source": [
    "### QQ-plot and Histogram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f09927e6-57b1-4750-9a40-6eb9a32d37a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "counts, bins, patches = plt.hist(SD, 6, density=False, facecolor='g', alpha=0.75)\n",
    "plt.xlabel('Avg Daily Visitors')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Histogram of Standard Residuals Avg Daily Visitors & Fb likes')\n",
    "plt.grid(True)\n",
    "bin_centers = [np.mean(k) for k in zip(bins[:-1], bins[1:])]\n",
    "plt.show()\n",
    "fig = sm.qqplot(SD, stats.norm, fit=True, line='45')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d1a72ef-f075-412d-8acb-f14a0c104625",
   "metadata": {},
   "source": [
    "#### Shapiro Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6994ce7a-b048-4349-b3f0-ec9f0abc0e46",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shapiro Test\n",
      "Statistics=0.098, p=0.000\n"
     ]
    }
   ],
   "source": [
    "print('Shapiro Test')\n",
    "stat, p = stats.shapiro(SD)\n",
    "print('Statistics=%.3f, p=%.3f' % (stat, p))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73fff971-336a-4c67-8eb6-4db08e45bd1c",
   "metadata": {},
   "source": [
    "Since pvalue is smaller than alpha(0.05), H0 is rejected. Errors are not normally distributed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "18d3b3cb-c61b-4468-a46e-17e135142372",
   "metadata": {},
   "source": [
    "### Chi test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "26124379-eb02-4d6e-bb7f-02c2b67afc12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n"
     ]
    }
   ],
   "source": [
    "chi2_pval = Chi_Square_for_Normality(SD, 6, 0.05) \n",
    "print(chi2_pval)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "042ff842-d5fd-4052-b2f6-fc24e238561d",
   "metadata": {},
   "source": [
    "### H0: Homoscedasticity <br>\n",
    "### H1: Heteroscedasticity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f2b09080-9cae-4723-ab2c-597aa60fe75d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 480x320 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "y_pre = data1[:, 2]\n",
    "plt.plot(y_pre, SD, 'o', color = 'gray')\n",
    "plt.axhline(y=0, color = 'blue')\n",
    "plt.axhline(y=2, color = 'red')\n",
    "plt.axhline(y=-2, color = 'red')\n",
    "plt.title('Standardized Residual Plot')\n",
    "plt.xlabel('Odometer')\n",
    "plt.ylabel('Standardized Residual')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f6556e3-de30-4830-beff-4df79924cb39",
   "metadata": {},
   "source": [
    "The result seems to be Homoscedasticity. The spread of data points doesn't change much."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3d20fda-cde6-4452-9e82-4293810b39ed",
   "metadata": {},
   "source": [
    "### Runs test\n",
    "\n",
    "測試independence <br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "05fcb739-c37d-4f6f-8cd1-97b4c6adcc3d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Randomness Test using Runs Test\n",
      " - H0: Randomness exists.\n",
      " - H1: Randomness does not exist\n",
      "\n",
      "runs =  298\n",
      "n1 =  742\n",
      "n2 =  741\n",
      "\n",
      "runs_exp =  742.4996628455833\n",
      "stan_dev =  19.248363414968605\n",
      "z =  -23.09285487097129\n",
      "pval_z =  5.462392283224451e-118\n",
      "\n",
      "Since p-value < 0.05, we reject H0 and conclude randomness does not exist.\n"
     ]
    }
   ],
   "source": [
    "Randomness(SD)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e8a4f41-1845-4344-8d21-764196e48e94",
   "metadata": {},
   "source": [
    "Since pvalue is smaller than alpha(0.05), H0 is rejected. Randomness doen't exist."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ae0373c-f60c-451a-b693-8a7701a029f2",
   "metadata": {},
   "source": [
    "## Outliers\n",
    "\n",
    "當error >2 or <-2 ,可以當成outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e6dc08b5-3206-4bae-bac6-5a5067bed944",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outliers by SD = \n",
      "\n",
      "0     25.116681\n",
      "1     24.879196\n",
      "2     -7.839999\n",
      "3      5.624399\n",
      "4      5.748741\n",
      "5      4.753084\n",
      "6      3.175641\n",
      "7      3.800599\n",
      "8      2.866942\n",
      "9      3.020082\n",
      "10     2.278956\n",
      "11     3.071482\n",
      "12     2.757912\n",
      "13     2.153594\n",
      "14     2.250919\n",
      "15     2.235249\n",
      "16     2.192857\n",
      "Name: SD, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "fb_c = pd.DataFrame(SD,columns = ['SD'])\n",
    "filter = (fb_c['SD'] < -2) | (fb_c['SD'] > 2)\n",
    "print(\"Outliers by SD = \\n\")\n",
    "print(fb_c['SD'].loc[filter])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb105089-93d3-4e76-a1ef-390e87d820b0",
   "metadata": {},
   "source": [
    "### Influential Observation\n",
    "\n",
    "足以大幅影響回歸線斜率的點"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4b253fe3-4a7b-489d-b159-eaa1aebc3aad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Influential Observations \n",
      "\n",
      "[9.03595271e-04 6.76298160e-04 9.96563195e-01 ... 6.75094771e-04\n",
      " 6.75092360e-04 6.75019433e-04]\n",
      "Influential Observations by hi = \n",
      "\n",
      "2    0.996563\n",
      "Name: hi, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nInfluential Observations \\n\")\n",
    "x_data = fb['Facebook_likes'].values\n",
    "y_data = fb['Avg_Daily_Visitors'].values\n",
    "cov_mat1 = np.cov(y_data, x_data)\n",
    "x_data_bar = x_data.mean()\n",
    "data_nobs = len(x_data)\n",
    "h_val = 1 / data_nobs + (x_data - x_data_bar) ** 2 / (data_nobs - 1) / cov_mat1[1,1]\n",
    "print(h_val)\n",
    "fb_h = pd.DataFrame(h_val,columns = ['hi'])\n",
    "filter = (fb_h['hi'] > 6 / data_nobs )\n",
    "print(\"Influential Observations by hi = \\n\")\n",
    "print(fb_h['hi'].loc[filter])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eaf58260-9de7-4a97-85d3-12c34f072347",
   "metadata": {},
   "source": [
    "### Stdandard errors\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0d65164c-8568-4569-b37b-d9234c9fffea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MSE:  409345482822249.44\n",
      "Standard errors:  20232288.126216706\n"
     ]
    }
   ],
   "source": [
    "s2_e = fb_result.mse_resid\n",
    "print('MSE: ', s2_e)\n",
    "s_e = fb_result.mse_resid ** 0.5\n",
    "print('Standard errors: ', s_e)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7badb619-5537-41fd-afb7-9a452fcfd89a",
   "metadata": {},
   "source": [
    "### Coefficient of correlation (and determination)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d3934f0a-e78e-4ec0-992d-e47316d38774",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SSR =  6.062406600597514e+17\n",
      "R2 =  0.11239419506359305\n"
     ]
    }
   ],
   "source": [
    "SSR = fb_result.ssr\n",
    "# SST = SSR + SSE\n",
    "R2 = fb_result.rsquared\n",
    "print(\"SSR = \", SSR)\n",
    "print(\"R2 = \", R2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5d0b0ba-72eb-44bc-aeba-b2f176dbc915",
   "metadata": {},
   "source": [
    "### Testing Coefficient of correlation\n",
    "H0: r = 0 <br>\n",
    "H1: r $\\neq$ 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c0fe2651-373c-425b-85ec-3e9a26b63742",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r =  0.3352524348361895\n",
      "t_critical =  1.961567075831078\n",
      "t =  13.694286293732866\n",
      "p_value =  2.7921815998602387e-40\n"
     ]
    }
   ],
   "source": [
    "cor_mat = np.corrcoef(fb[['Avg_Daily_Visitors', 'Facebook_likes']].values, rowvar = False)\n",
    "n = fb['Avg_Daily_Visitors'].shape[0]\n",
    "# print(n)\n",
    "r_t_value = c_of_c_test(cor_mat[1,0], n,0.05)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
