#!/usr/bin/env python
# coding: utf-8

# # K-Means
# 
# ## 這是讀info檔案

# In[1]:


# -*- coding: utf-8 -*-
"""
Created on Thu Mar 24 23:34:04 2022

@author: User
"""

import pandas as pd
import numpy as np

df = pd.read_excel("spaceInfo_6.1.xlsx")

stations = len(df.index)


# ## 這是字型

# In[2]:


import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.font_manager import fontManager
# 如果下載字體失敗, 再重新下載一次就可以了
fontManager.addfont('/Users/User/Downloads/TaipeiSansTCBeta-Regular.ttf')
mpl.rc('font', family='Taipei Sans TC Beta')

X_hat = np.asmatrix(df[["long", "lati"]].to_numpy())
Label = list(df["address"])


for i in range(len(Label)):
    Label[i] = Label[i][:5]


# ### k-means 主程式(僅供參考，不需執行，之前已經分出一個最好的結果，下面會直接讀取)

# In[] K-means
# k = 6
# index = np.random.choice(len(X_hat), k, replace=False)
# centroids = X_hat[index, :]
# distances = np.empty(shape=(stations,k),dtype='object')
# for i in range(len(X_hat)):
#     for j in range(k):
#         distances[i,j] = float(np.sqrt(np.sum(np.square(X_hat[i, :] - centroids[j]))))
# cluster = np.array([np.argmin(i) for i in distances])
# for m in range(2000): 
#     centroids = []
#     for index in range(k):
#         temp_cent = X_hat[cluster==index].mean(axis=0) 
#         centroids.append(temp_cent)
#     centroids = np.vstack(centroids)
#     for i in range(len(X_hat)):
#         for j in range(k):
#             distances[i,j] = float(np.sqrt(np.sum(np.square(X_hat[i, :] - centroids[j]))))
#     cluster = np.array([np.argmin(i) for i in distances])


# # 讀取之前K-Means分群的結果

# In[8]:


import pandas as pd

df_result = pd.read_csv("Cluster_result_v2.csv")
df_result = df_result.iloc[:,2:]
cluster = df_result["Cluster"]
k = 6

df_result.head()


# ## 從 function.py 那邊跑出來的結果

# In[9]:


# 貼上之後記得在keys之間加逗號

detail={
0 :  {'ID': 0, 'name_list': [0, 1, 2, 3, 4], 'r_a': [0.0, 0.0, 0.0, 0.0, -0.0, 7.0, 0.0], 'r_b': [0.0, -0.0, -0.0, 5.0, 1.9999999999999998, 0.0, -0.0], 'r_p': [0.0, -0.0, -0.0, 7.0, 1.9999999999999998, 0.0, 0.0], 'r_q': [0.0, -0.0, -0.0, 2.0, -0.0, 7.0, 0.0], 'r_x': [1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0], 'r_w_H': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_w_L': [0.0, 0.3, 0.3, 0.0222222222222222, 0.0, 0.3, 0.0], 'r_u': [1.0, 6.0, 2.0, 4.0, 5.0, 3.0, 7.0], 'r_y': [[0.0, -0.0, -0.0, -0.0, 0.0, 1.0, -0.0], [0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0], [0.0, 0.0, -0.0, 0.0, 1.0, -0.0, -0.0], [0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 1.0], [0.0, 0.0, -0.0, 1.0, 0.0, 0.0, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
,1 :  {'ID': 1, 'name_list': [5, 13, 14, 16, 26, 29, 30, 38, 46, 47, 50, 51], 'r_a': [0.0, 0.0, 0.0, 16.0, 0.0, 3.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0], 'r_b': [0.0, 13.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, 4.0, -0.0, 1.0, 3.0, -0.0, -0.0], 'r_p': [0.0, 13.0, -0.0, -0.0, -0.0, 10.0, -0.0, -0.0, 16.0, 11.0, 12.0, 13.0, -0.0, 0.0], 'r_q': [0.0, 0.0, -0.0, 16.0, -0.0, 13.0, -0.0, -0.0, 12.0, 13.0, 11.0, 10.0, 0.0, 0.0], 'r_x': [1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, -0.0, 1.0], 'r_w_H': [0.0, 0.0, 0.0037037037037037646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_w_L': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_u': [1.0, 12.0, 11.0, 2.0, 9.0, 8.0, 13.0, 10.0, 3.0, 5.0, 4.0, 6.0, 7.0, 14.0], 'r_y': [[0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0], [0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0], [0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0, -0.0, 0.0], [0.0, 0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0], [0.0, 1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0], [0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0], [0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 1.0, 0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 1.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0], [0.0, 0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
,2 :  {'ID': 2, 'name_list': [11, 15, 20, 28, 31, 33, 39, 45, 52], 'r_a': [0.0, 0.0, 0.0, 0.0, 7.0, 0.0, 0.0, 0.0, 7.0, 9.0, 0.0], 'r_b': [0.0, 1.0, 0.0, 3.0, 0.0, 0.0, 6.0, 12.0, 0.0, 0.0, 1.0], 'r_p': [0.0, 8.0, 16.0, 16.0, -0.0, -0.0, 7.0, 13.0, 1.0, 7.0, 1.0], 'r_q': [0.0, 7.0, 16.0, 13.0, 7.0, 0.0, 1.0, 1.0, 8.0, 16.0, 0.0], 'r_x': [1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'r_w_H': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_w_L': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_u': [1.0, 9.0, 5.0, 6.0, 3.0, 2.0, 10.0, 7.0, 8.0, 4.0, 11.0], 'r_y': [[0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
,3 :  {'ID': 3, 'name_list': [6, 8, 21, 22, 23, 24, 36, 42, 43], 'r_a': [0.0, 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 5.0, 0.0, 6.0, 0.0], 'r_b': [0.0, 0.0, 3.0, 6.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0], 'r_p': [0.0, 3.0, 6.0, 9.0, 11.0, 4.0, 16.0, 6.0, 3.0, 0.0, 0.0], 'r_q': [0.0, 4.0, 3.0, 3.0, 9.0, 6.0, 16.0, 11.0, -0.0, 6.0, 0.0], 'r_x': [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0], 'r_w_H': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_w_L': [0.0, 0.3, 0.027272727272727344, 0.0, 0.0, 0.3, 0.0, 0.0, 0.0, 0.027272727272727157, 0.0], 'r_u': [1.0, 5.0, 4.0, 9.0, 8.0, 6.0, 3.0, 7.0, 10.0, 2.0, 11.0], 'r_y': [[0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0, -0.0, 1.0, -0.0, -0.0, 0.0, -0.0, 0.0], [0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 1.0, 0.0, -0.0], [0.0, 0.0, 0.0, 1.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0], [0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, -0.0, 0.0, 0.0], [0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0], [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0], [0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 1.0], [0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
,4 :  {'ID': 4, 'name_list': [9, 12, 19, 34, 37, 40, 44, 48, 49], 'r_a': [0.0, 7.0, 5.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0], 'r_b': [0.0, 0.0, -0.0, 7.0, -0.0, -0.0, -0.0, 5.0, -0.0, -0.0, 0.0], 'r_p': [0.0, 5.0, -0.0, 7.0, -0.0, -0.0, -0.0, 12.0, -0.0, -0.0, 0.0], 'r_q': [0.0, 12.0, 5.0, -0.0, -0.0, -0.0, -0.0, 7.0, -0.0, -0.0, 0.0], 'r_x': [1.0, 1.0, 1.0, 1.0, -0.0, 0.0, -0.0, 1.0, -0.0, 0.0, 1.0], 'r_w_H': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_w_L': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_u': [1.0, 4.0, 2.0, 6.0, 11.0, 8.0, 9.0, 5.0, 10.0, 3.0, 7.0], 'r_y': [[0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0], [0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0], [0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0], [0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0], [0.0, -0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0], [0.0, 0.0, -0.0, 1.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
,5 :  {'ID': 5, 'name_list': [7, 10, 17, 18, 25, 27, 32, 35, 41], 'r_a': [0.0, 13.0, 0.0, 5.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0], 'r_b': [0.0, -0.0, -0.0, -0.0, 3.0, 3.0, 1.0, 3.0, 3.0, 5.0, -0.0], 'r_p': [0.0, -0.0, 0.0, 5.0, 9.0, 3.0, 10.0, 6.0, 8.0, 13.0, 0.0], 'r_q': [0.0, 13.0, -0.0, 10.0, 6.0, -0.0, 9.0, 3.0, 5.0, 8.0, 0.0], 'r_x': [1.0, 1.0, -0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0], 'r_w_H': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'r_w_L': [0.0, 0.3, 0.3, 0.0, 0.0, 0.0, 0.0, 0.14000000000000024, 0.0, 0.03684210526315796, 0.0], 'r_u': [1.0, 3.0, 2.0, 6.0, 8.0, 10.0, 7.0, 9.0, 5.0, 4.0, 11.0], 'r_y': [[0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0], [0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 1.0], [0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, 1.0, -0.0, 0.0, -0.0, -0.0, -0.0], [0.0, -0.0, -0.0, 1.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0], [0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]}
}


# In[] Plotting clustering result
LABEL_COLOR_MAP = {0:'orange', 1:'green', 2:'cyan', 3:'blue', 4:'m', 5:'yellow'}                 
label_color = [LABEL_COLOR_MAP[l] for l in cluster]

plt.rcParams["figure.figsize"] = (15,10)
plt.scatter([X_hat[:,0]], [X_hat[:,1]], c=label_color, cmap='viridis')
# plt.scatter([centroids[:,0]], [centroids[:,1]], s=30, c='r', marker='P', label='Centroid for cluster')
# labels
# plt.scatter([X_hat[:,0]], [X_hat[:,1]], c="blue", marker='P', label='Centroid for cluster')

# for i in range(len(Label)):
    # plt.annotate(Label[i], (X_hat[i,0]-0.0008, X_hat[i,1]-0.00025))
groups = 6

df_a_b = []

for i in range(groups):
    id_list = detail[i]["name_list"]
    columns_list = ["start_point"]
    for g in id_list:
        columns_list.append(str(g))
    columns_list.append("end_point")
    df_a_b.append(pd.DataFrame(zip(detail[i]["r_a"], detail[i]["r_b"]), columns = (["a(OUT)","b(IN)"]), index=columns_list))
    for j in range(len(id_list)):
        id = id_list[j]
        if detail[i]["r_a"][j] > 0:
            plt.annotate("%s (-%d)"%(Label[id], int(detail[i]["r_a"][j])), (X_hat[id,0]-0.0008, X_hat[id,1]-0.00025))
        elif detail[i]["r_b"][j] > 0:
            plt.annotate("%s (+%d)"%(Label[id], int(detail[i]["r_b"][j])), (X_hat[id,0]-0.0008, X_hat[id,1]-0.00025))
        y_list = detail[i]["r_y"][j]
        # print(i,j)
        # print(y_list)
df_y_ij = []


for i in range(groups):
    id_list = detail[i]["name_list"]
    #print("==========id_list===========")
    #print(id_list)
    y_list_1 = detail[i]["r_y"]
    #print("==========y_list_1===========")
    #print(y_list_1)
    columns_list = ["start_point"]
    for g in id_list:
        columns_list.append(str(g))
    columns_list.append("end_point")
    df_y_ij.append(pd.DataFrame(y_list_1, columns = (columns_list), index=columns_list))
    items = len(y_list_1)
    for j in range(0,items):
        y_list = y_list_1[j]
        #print("=========y_list============")
        #print(y_list)
        for k in range(0,items):
        # j = 0（從虛擬點出發）, y_jk = 1（從虛擬點到 k）, k 的 ID 是 id_list[k-1]
            if j == 0 and y_list[k] == 1:
                print((i,j,k))
                b_ID = id_list[k-1] 
                plt.scatter(X_hat[b_ID,0],X_hat[b_ID,1], s=100, c='r', marker='P', label='path in g'+str(i+1))

            # # y_ab = 1（從虛擬點到 k ）, a_ID = id_list[j-1], b_ID = id_list[k-1]
            elif y_list[k] == 1 and k!= items-1:
                    print((i,j,k))
                    a_ID = id_list[j-1]
                    b_ID = id_list[k-1]
                    xs = [X_hat[a_ID,0], X_hat[b_ID,0]]
                    ys = [X_hat[a_ID,1], X_hat[b_ID,1]]
                    plt.plot(xs, ys, c='black', linestyle = '-.')
                    # plt.scatter(xs, ys, c='r')
            elif y_list[k] == 1 and k == len(y_list)-1:
                continue



plt.title("Clustering result of Ubike 2.0 stations in NTU campus when K = %d"%(k))
plt.legend()
plt.xlabel("Latitude")
plt.ylabel("Longitude")

# In[] df_y_i_j
from pandas import ExcelWriter

k = 6
writer = pd.ExcelWriter('df_y_ij.xlsx')
sheet_name = ["Cluster %d"%(i) for i in range(k)]
for i, j in zip(df_y_ij, sheet_name):
    i.to_excel(writer, sheet_name=j)  
writer.save()

# In[] df_a_b
from pandas import ExcelWriter

k = 6
writer = pd.ExcelWriter('df_a_b.xlsx')
sheet_name = ["Cluster %d"%(i) for i in range(k)]
for i, j in zip(df_a_b, sheet_name):
    i.to_excel(writer, sheet_name=j)  
writer.save()